# /etc/dhcp/dhcpd.conf

# All DHCP leases should have limits on their lifetimes. A DHCP request is not a
# taxing request for a client to make, so a short default is acceptable.
default-lease-time {{default_lease_time}};

# Some clients may have good reason to request a lease for longer than the
# default. However, too long of a lease time can lead to an empty IP address
# pool if several clients fail to release their leases, but continue to request
# new ones. We will limit the maximum lease time to mitigate the possibility of
# that sort of quality-of-service degredation.
max-lease-time {{max_lease_time}};

# The ddns-updates-style parameter controls whether or not the server will
# attempt to perform a DNS update when a lease is confirmed.
ddns-update-style standard;

# If this DHCP server is the official DHCP server for the local network, the
# authoritative directive should be uncommented.
authoritative;

# Ignore DHCPDECLINE messages. This DHCP server should be the only authority on
# IP address allocation on this network, so decline messages offer no value.
deny declines;

# Send an ICMP Echo to an IP address when considering it for a lease. If no
# response is heard after the timeout (default 1 second), claim the IP address
# for the DHCP lease.
ping-check true;

{% if domain_name is not undefined %}
# The domain name that clients should use when resolving hostnames via DNS.
option domain-name "{{domain_name}}";
{% endif %}

{% if domain_search is not undefined %}
# The search list of domain names that a client should query to locate
# not-fully-qualified-domain-names.
option domain-search "{{domain_search|join('" "')}}";
{% endif %}

#
# Hosts
#

{% if hosts is not undefined %}
{% for host in hosts %}
{% if host.comment is not undefined %}
{% for line in host.comment.splitlines() %}
# {{line}}
{% endfor %}
{% endif %}
host {{host.name}} {
{% for name, value in host.configuration.items() %}
  {{name}} {{value}};
{% endfor %}
}
{% endfor %}
{% endif %}

#
# Subnets
#

{% if subnets is not undefined %}
{% for subnet in subnets %}
{% if subnet.comment is not undefined %}
{% for line in subnet.comment.splitlines() %}
# {{line}}
{% endfor %}
{% endif %}
subnet {{subnet.number}} netmask {{subnet.netmask}} {
{% if subnet.options is not undefined %}
  # Options
{% for name, value in subnet.options.items() %}
  option {{name}} {{value}};
{% endfor %}
{% endif %}

{% if subnet.pools is not undefined %}
{% for pool in subnet.pools %}
{% if pool.comment is not undefined %}
{% for line in pool.comment.splitlines() %}
  # {{line}}
{% endfor %}
{% endif %}
  pool {
{% if pool.range is not undefined %}
    # IP address range allocated for this poll.
    range {{pool.range.first}} {{pool.range.last}};
{% endif %}

{% if pool.options is not undefined %}
    # Pool-specific options
{% for name, value in pool.options %}
    option {{name}} {{value}};
{% endfor %}
{% endif %}

{% if pool.allowances is not undefined %}
    # Pool-specific allowances
{% for parameter in pool.allowances %}
    allow {{parameter}};
{% endfor %}
{% endif %}

{% if pool.denials is not undefined %}
    # Pool-specific denials
{% for parameter in pool.denials %}
    deny {{parameter}};
{% endfor %}
{% endif %}

{% if pool.ignorances is not undefined %}
    # Pool-specific ignorances
{% for parameter in pool.ignorances %}
    ignore {{parameter}};
{% endfor %}
{% endif %}

{% if pool.parameters is not undefined %}
    # Pool-specific parameters
{% for name, value in pool.parameters.items() %}
    {{name}} {{value}};
{% endfor %}
{% endif %}
  }
{% endfor %}
{% endif %}
}
{% endfor %}
{% endif %}
