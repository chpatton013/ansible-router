#!/usr/bin/env python

from __future__ import print_function

import argparse
import datetime
import os
import sys

import requests
import yaml


DEFAULT_DOMAIN_LISTS_FILE = "{{domain_lists_file}}"
DEFAULT_DOMAIN_LISTS_DIR = "{{domain_lists_dir}}"
SECONDS_PER_DAY = 86400
SECONDS_PER_HOUR = 3600
FILE_CHUNK_SIZE = 1024


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--lists-file", default=DEFAULT_DOMAIN_LISTS_FILE)
    parser.add_argument("--lists-dir", default=DEFAULT_DOMAIN_LISTS_DIR)

    allow_expired_group = parser.add_mutually_exclusive_group()
    allow_expired_group.add_argument(
        "--allow-expired",
        action="store_true",
        dest="allow_expired",
    )
    allow_expired_group.add_argument(
        "--no-allow-expired",
        action="store_false",
        dest="allow_expired",
    )

    delete_untracked_group = parser.add_mutually_exclusive_group()
    delete_untracked_group.add_argument(
        "--delete-untracked",
        action="store_true",
        dest="delete_untracked",
    )
    delete_untracked_group.add_argument(
        "--no-delete-untracked",
        action="store_false",
        dest="delete_untracked",
    )

    parser.set_defaults(allow_expired=False, delete_untracked=True)

    return parser.parse_args()


def _read_domain_lists_file(lists_file_path):
    return yaml.load(open(lists_file_path, "r"), Loader=yaml.SafeLoader)


def _domain_list_file_path(lists_dir, list_name):
    return os.path.join(lists_dir, "list.{}".format(list_name))


def _domain_list_file_expired(file_path, now):
    expire_time = (now - SECONDS_PER_DAY - SECONDS_PER_HOUR)
    try:
        return os.path.getmtime(file_path) < expire_time
    except OSError:
        return True


def _download_domain_list_file(url, file_path):
    try:
        print("Fetching domain list from URL {}...".format(url))
        response = requests.get(url, stream=True)
    except requests.exceptions.RequestException as exception:
        print(
            "Failed to request from URL: '{}'\n{}".format(file_path, exception),
            file=sys.stderr,
        )
        return False

    if response.status_code != requests.codes.ok:
        print(
            "Unsuccessful status code returned from URL: '{}'\n{}".format(
                file_path,
                response,
            ),
            file=sys.stderr,
        )
        return False

    print("Writing domain list to file {}...".format(file_path))
    with open(file_path, "w") as f:
        for chunk in response.iter_content(chunk_size=FILE_CHUNK_SIZE):
            if chunk:
                f.write(chunk)
    return True


def _copy_domain_list_file(src_path, dst_path):
    with open(src_path, "r") as src_file:
        with open(dst_path, "w") as dst_file:
            content = src_file.read(FILE_CHUNK_SIZE)
            while content:
                dst_file.write(content)
                content = src_file.read(FILE_CHUNK_SIZE)
    return True


def _seconds_since_epoch():
    now = datetime.datetime.now()
    epoch = datetime.datetime(1970, 1, 1)
    return (now - epoch).total_seconds()


def _sync_domain_list(domain_list, lists_dir, allow_expired, now):
    file_path = _domain_list_file_path(lists_dir, domain_list["name"])
    if not allow_expired or _domain_list_file_expired(file_path, now):
        if "url" in domain_list:
            print("Downloading domain list {} from URL {}".format(
                domain_list["name"],
                domain_list["url"],
            ))
            return _download_domain_list_file(domain_list["url"], file_path)
        elif "path" in domain_list:
            print("Copying domain list {} from path {}".format(
                domain_list["name"],
                domain_list["path"],
            ))
            return _copy_domain_list_file(domain_list["path"], file_path)
        else:
            raise ValueError(
                "Domain list {} does not have 'url' or 'path' property".format(
                    str(domain_list),
                ),
            )
    else:
        print("Domain list {} has not expired. Skipping.".format(
            domain_list["name"],
        ))
        return True


def _sync_domain_lists(domain_lists_zones, lists_dir, allow_expired):
    now = _seconds_since_epoch()
    failures = [
        domain_list
        for zone in domain_lists_zones
        for domain_list in zone["lists"]
        if not _sync_domain_list(domain_list, lists_dir, allow_expired, now)
    ]

    return failures


def _delete_untracked_domain_lists(domain_lists_zones, lists_dir):
    tracked = {
        domain_list["name"]
        for zone in domain_lists_zones
        for domain_list in zone["lists"]
    }
    present = {f.partition("list.")[2] for f in os.listdir(lists_dir)}
    for name in sorted(present - tracked):
        print("Deleting untracked list {}".format(name))
        os.unlink(_domain_list_file_path(lists_dir, name))


def main():
    args = _parse_args()

    domain_lists_zones = _read_domain_lists_file(args.lists_file)
    failures = _sync_domain_lists(
        domain_lists_zones,
        args.lists_dir,
        args.allow_expired,
    )
    if args.delete_untracked:
        _delete_untracked_domain_lists(domain_lists_zones, args.lists_dir)

    if failures:
        domain_lists = 0
        for zone in domain_lists_zones:
            for domain_list in zone["lists"]:
                domain_lists += 1
        print(
            "Failed to sync {} of {} lists".format(len(failures), domain_lists),
            file=sys.stderr,
        )
        for domain_list in failures:
            resource = domain_list.get("url", domain_list.get("path", "?"))
            print(
                "  {}: {}".format(domain_list["name"], resource),
                file=sys.stderr,
            )

    return len(failures)


if __name__ == "__main__":
    sys.exit(main())
